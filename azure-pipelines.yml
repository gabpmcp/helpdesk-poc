trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - helpdesk-poc/*

pool:
  vmImage: 'ubuntu-latest'

# Definir variables que serán diferentes en cada ambiente
variables:
  - name: isDev
    value: $[eq(variables['Build.SourceBranchName'], 'develop')]
  - name: workingDirectory
    value: '$(System.DefaultWorkingDirectory)'
  - group: variables-dev

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '20.x'
  displayName: 'Instalar Node.js'

# Etapa de diagnóstico para verificar la estructura de directorios
- script: |
    echo "Mostrando estructura de directorios"
    ls -la
    echo "Directorio actual: $(pwd)"
  displayName: 'Diagnóstico de directorios'

# Generar package-lock.json primero si no existe
- script: |
    if [ ! -f "package-lock.json" ]; then
      echo "Generando package-lock.json"
      npm install --package-lock-only
    else
      echo "package-lock.json ya existe"
    fi
  displayName: 'Generar package-lock.json'
  workingDirectory: '$(workingDirectory)'

# Instalar dependencias sin el cd incorrecto
- script: |
    npm ci
  displayName: 'Instalar dependencias'
  workingDirectory: '$(workingDirectory)'
  
# Ejecutar pruebas sin el cd incorrecto
- script: |
    npm run test
  displayName: 'Ejecutar pruebas'
  continueOnError: true
  workingDirectory: '$(workingDirectory)'

# Generar archivo de configuración en formato JSON para producción
- task: Bash@3
  displayName: 'Generar configuración de entorno'
  inputs:
    targetType: 'inline'
    script: |
      # Crear script para generar archivo de configuración en formato ESM
      cat > generate-config.js << EOL
      // Utilizando importación ESM en lugar de require
      import { writeFile } from 'fs/promises';
      
      // Configuración específica para cada ambiente
      const config = {
        server: {
          port: process.env.PORT || 3000,
          nodeEnv: '$(Build.SourceBranchName)' === 'main' ? 'production' : 'staging',
        },
        security: {
          jwtSecret: process.env.JWT_SECRET || '$(ZOHO_AUTH_TOKEN)',
          corsOrigin: '$(Build.SourceBranchName)' === 'main' 
            ? 'https://platform.advancio.io' 
            : 'https://staging-helpdesk-portal.example.com',
        },
        services: {
          n8n: {
            webhookBaseUrl: '$(N8N_BASE_URL)',
          },
          supabase: {
            url: '$(SUPABASE_URL)',
            key: '$(SUPABASE_ANON_KEY)',
            serviceKey: '$(SUPABASE_SERVICE_KEY)'
          },
          zoho: {
            apiKey: '$(ZOHO_API_KEY)',
            authToken: '$(ZOHO_AUTH_TOKEN)',
            baseUrl: '$(ZOHO_BASE_URL)'
          }
        }
      };
      
      // Usando async/await con promises para escritura de archivos (estilo ESM)
      try {
        await writeFile('runtime-config.json', JSON.stringify(config, null, 2));
        console.log('Archivo de configuración generado');
      } catch (error) {
        console.error('Error al generar archivo de configuración:', error);
        process.exit(1);
      }
      EOL
      
      # Ejecutar script con Node.js
      node generate-config.js
    workingDirectory: '$(workingDirectory)'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(workingDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/helpdesk-poc.zip'
    replaceExistingArchive: true
  displayName: 'Comprimir proyecto'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/helpdesk-poc.zip'
    ArtifactName: 'helpdesk-poc'
  displayName: 'Publicar artefacto'

# Documentación de despliegue
- task: Bash@3
  displayName: 'Generar README de despliegue'
  inputs:
    targetType: 'inline'
    script: |
      # Crear directorio si no existe
      mkdir -p $(Build.ArtifactStagingDirectory)
      
      # Uso de heredoc con opción -EOF para permitir indentación y escape para variables
      cat > $(Build.ArtifactStagingDirectory)/deploy-instructions.md <<-'EOF'
      # Instrucciones de despliegue (estilo Clojure)
      
      Este artefacto sigue principios funcionales de Clojure para la configuración:
      
      1. **NO utilizar .env en producción**
      2. **Inyectar configuración en runtime**
      
      ## Opciones para inyectar configuración:
      
      ### Opción 1: Variables de entorno
      
      ```bash
      NODE_ENV=production \
      PORT=3000 \
      JWT_SECRET=my_secret_key \
      CORS_ORIGIN=https://mi-frontend.com \
      SUPABASE_URL=https://my-project.supabase.co \
      SUPABASE_KEY=my-key \
      node src/index.js
      ```
      
      ### Opción 2: Archivo de configuración en tiempo de ejecución
      
      ```bash
      # Montar el archivo runtime-config.json en el contenedor
      # El backend lo detectará automáticamente
      docker run -v /path/to/runtime-config.json:/app/runtime-config.json my-app
      ```
      
      ## Recomendación para Azure App Service
      
      Configurar las variables de entorno en la sección "Configuración > Variables de aplicación"
      EOF
      
      # Verificar que el archivo se haya creado correctamente
      if [ -f "$(Build.ArtifactStagingDirectory)/deploy-instructions.md" ]; then
        echo "✅ Instrucciones de despliegue generadas correctamente"
      else
        echo "❌ Error al generar instrucciones de despliegue"
        exit 1
      fi

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/deploy-instructions.md'
    ArtifactName: 'deploy-instructions'
  displayName: 'Publicar instrucciones de despliegue'
